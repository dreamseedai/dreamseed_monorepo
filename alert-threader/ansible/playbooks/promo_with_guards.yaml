---
- name: Promote Green -> Blue with metric/log guards
  hosts: all
  become: true
  vars:
    prom_url: "{{ prometheus_url | default('http://prometheus.local:9090') }}"
    loki_url: "{{ loki_url | default('http://loki.local:3100') }}"
    job: "{{ threader_job | default('threader') }}"
    max_5xx_ratio: "{{ max_5xx_ratio | default(0.01) }}"
    min_health_ratio: "{{ min_health_ratio | default(0.995) }}"
    max_error_logs_per_min: "{{ max_error_logs_per_min | default(1) }}"
    window: "{{ guard_window | default('5m') }}"
    guard_script: "{{ qos_guard_script | default('/usr/local/sbin/qos_guard.sh') }}"
    retry_script: "{{ retry_script | default('/usr/local/sbin/retry_backoff.sh') }}"
  
  tasks:
    - name: Check QoS guard-window status
      shell: "{{ guard_script }} status"
      register: qos_status
      failed_when: false
      changed_when: false

    - name: Fail if QoS guard-window is locked
      fail:
        msg: "QoS guard-window is locked - deployment blocked due to recent instability"
      when: qos_status.rc != 0

    - name: Query Prometheus - 5xx ratio (1m)
      uri:
        url: "{{ prom_url }}/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "avg_over_time(job:http_5xx_ratio_1m{job=\"{{ job }}\"}[1m])"
        return_content: true
        status_code: 200
      register: prom_5xx
      failed_when: false

    - name: Set 5xx ratio fact
      set_fact:
        five_xx: "{{ (prom_5xx.json.data.result | first).value[1] | float | default(0.0) }}"
      when: prom_5xx.json.data.result is defined and prom_5xx.json.data.result | length > 0

    - name: Set default 5xx ratio
      set_fact:
        five_xx: 0.0
      when: prom_5xx.json.data.result is not defined or prom_5xx.json.data.result | length == 0

    - name: Query Prometheus - health ratio (1m)
      uri:
        url: "{{ prom_url }}/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "avg_over_time(job:health_ok_ratio_1m{job=\"{{ job }}\"}[1m])"
        return_content: true
        status_code: 200
      register: prom_health
      failed_when: false

    - name: Set health ratio fact
      set_fact:
        health: "{{ (prom_health.json.data.result | first).value[1] | float | default(1.0) }}"
      when: prom_health.json.data.result is defined and prom_health.json.data.result | length > 0

    - name: Set default health ratio
      set_fact:
        health: 1.0
      when: prom_health.json.data.result is not defined or prom_health.json.data.result | length == 0

    - name: Query Loki - error log rate (1m)
      uri:
        url: "{{ loki_url }}/loki/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "sum(rate({job=\"{{ job }}\"} |~ \"ERROR|Exception|Traceback\"[1m]))"
        return_content: true
        status_code: 200
      register: loki_errors
      failed_when: false

    - name: Set error log rate fact
      set_fact:
        error_logs: "{{ (loki_errors.json.data.result | first).value[1] | float | default(0.0) }}"
      when: loki_errors.json.data.result is defined and loki_errors.json.data.result | length > 0

    - name: Set default error log rate
      set_fact:
        error_logs: 0.0
      when: loki_errors.json.data.result is not defined or loki_errors.json.data.result | length == 0

    - name: Display current metrics
      debug:
        msg: |
          Current metrics (1m window):
          - 5xx error ratio: {{ "%.4f" | format(five_xx) }} (max: {{ max_5xx_ratio }})
          - Health ratio: {{ "%.4f" | format(health) }} (min: {{ min_health_ratio }})
          - Error logs/min: {{ "%.2f" | format(error_logs) }} (max: {{ max_error_logs_per_min }})

    - name: Check 5xx ratio threshold
      fail:
        msg: "5xx error ratio ({{ "%.4f" | format(five_xx) }}) exceeds threshold ({{ max_5xx_ratio }})"
      when: five_xx > max_5xx_ratio

    - name: Check health ratio threshold
      fail:
        msg: "Health ratio ({{ "%.4f" | format(health) }}) below threshold ({{ min_health_ratio }})"
      when: health < min_health_ratio

    - name: Check error log rate threshold
      fail:
        msg: "Error log rate ({{ "%.2f" | format(error_logs) }}/min) exceeds threshold ({{ max_error_logs_per_min }}/min)"
      when: error_logs > max_error_logs_per_min

    - name: Lock QoS guard-window for stability monitoring
      shell: "{{ guard_script }} lock {{ window }}"
      register: lock_result

    - name: Confirm guard-window lock
      debug:
        msg: "ðŸ”’ QoS guard-window locked for {{ window }} - monitoring stability"


