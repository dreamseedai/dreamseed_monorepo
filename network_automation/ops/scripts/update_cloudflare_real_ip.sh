#!/usr/bin/env bash
set -euo pipefail

# Update nginx real_ip config with Cloudflare's current CIDR ranges.
# Writes to /etc/nginx/conf.d/real_ip_cloudflare.conf and reloads nginx iff changed.
# Safe to run repeatedly (idempotent). Requires: curl, nginx, awk, sha256sum.

OUT_DIR=/etc/nginx/conf.d
OUT_FILE="$OUT_DIR/real_ip_cloudflare.conf"
TMP_DIR=$(mktemp -d)
TMP_FILE="$TMP_DIR/real_ip_cloudflare.conf"
LOCK_FILE=/run/update_cloudflare_real_ip.lock

CF_V4_URL="https://www.cloudflare.com/ips-v4"
CF_V6_URL="https://www.cloudflare.com/ips-v6"

# Optional flags
KEEP_LOCAL="yes"  # keep set_real_ip_from 127.0.0.1

exec 9>"$LOCK_FILE" || true
if ! flock -n 9; then
  echo "Another update is in progress; exiting." >&2
  exit 0
fi

mkdir -p "$OUT_DIR"

fetch_ips() {
  local url="$1"
  curl -fsSL "$url" | awk 'NF {print $0}'
}

validate_cidr() {
  # very loose validation: lines must look like IPv4/IPv6 CIDR
  grep -E -i '^(([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}|[0-9a-f:]+/[0-9]{1,3})$' || true
}

V4=$(fetch_ips "$CF_V4_URL" | validate_cidr)
V6=$(fetch_ips "$CF_V6_URL" | validate_cidr)

if [ -z "$V4" ] && [ -z "$V6" ]; then
  echo "Failed to fetch Cloudflare IP lists" >&2
  exit 1
fi

{
  echo "# Auto‑generated by update_cloudflare_real_ip.sh on $(date -u +%FT%TZ)"
  echo "# Source: $CF_V4_URL, $CF_V6_URL"
  if [ "$KEEP_LOCAL" = "yes" ]; then
    echo "set_real_ip_from 127.0.0.1;"
  fi
  echo "$V4" | awk '{printf("set_real_ip_from %s;\n", $0)}'
  echo "$V6" | awk '{printf("set_real_ip_from %s;\n", $0)}'
} > "$TMP_FILE"

# Atomically replace if contents changed
NEED_UPDATE=1
if [ -f "$OUT_FILE" ]; then
  if sha256sum "$OUT_FILE" "$TMP_FILE" | awk '{print $1}' | uniq -d | grep -q .; then
    NEED_UPDATE=0
  fi
fi

if [ "$NEED_UPDATE" -eq 1 ]; then
  cp -af "$TMP_FILE" "$OUT_FILE"
  if nginx -t; then
    systemctl reload nginx
    echo "✅ Updated and reloaded nginx: $OUT_FILE"
  else
    echo "❌ nginx -t failed; reverting change" >&2
    exit 1
  fi
else
  echo "No change in Cloudflare CIDRs; nginx reload not required."
fi

rm -rf "$TMP_DIR" || true
