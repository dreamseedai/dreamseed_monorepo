name: DreamSeed CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'api/**'
      - 'backend/**'
      - 'apps/seedtest-api/**'
      - 'tests/**'
      - '**/*.py'
      - 'requirements*.txt'
      - 'Dockerfile'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 오전 2시에 실행
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      profile:
        description: 'Test profile (fast: no coverage, full: with coverage)'
        required: false
        default: 'fast'
        type: choice
        options:
          - fast
          - full

permissions:
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  REDIS_VERSION: '7'
  STAGE: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      py: ${{ steps.filter.outputs.py }}
      api: ${{ steps.filter.outputs.api }}
      backend: ${{ steps.filter.outputs.backend }}
      seedtest_api: ${{ steps.filter.outputs.seedtest_api }}
      docker: ${{ steps.filter.outputs.docker }}
      tests: ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ github.token }}
          filters: |
            py:
              - '**/*.py'
            api:
              - 'api/**'
            backend:
              - 'backend/**'
            seedtest_api:
              - 'apps/seedtest-api/**'
              - 'apps/seedtest_api/**'
            docker:
              - 'Dockerfile'
            tests:
              - 'tests/**'
  # 코드 품질 검사
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.py == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.seedtest_api == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then
            echo "Installing project dependencies from requirements.txt"
            pip install -r requirements.txt
          else
            echo "requirements.txt not found; skipping project dependency install"
          fi

      - name: Code formatting check (Black)
        run: |
          set -e
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            CHANGED=$(git diff --name-only "$BASE_SHA...$HEAD_SHA" -- '*.py' | grep -Ev '(^|/|\\)mock_api\.py$' || true)
            if [ -z "$CHANGED" ]; then
              echo "No Python file changes in PR; skipping Black"
              exit 0
            fi
            echo "Running Black on changed files (excluding mock_api.py):\n$CHANGED"
            # Note: Do NOT rely on --force-exclude; Black will still format explicitly passed files.
            black --check --diff $CHANGED
          else
            TARGETS=(api backend portal_api apps packages shared tests)
            FOUND=()
            for d in "${TARGETS[@]}"; do
              if [ -d "$d" ]; then
                FOUND+=("$d")
              fi
            done
            if [ ${#FOUND[@]} -eq 0 ]; then
              echo "No target code directories found; skipping Black"
              exit 0
            fi
            echo "Running Black on: ${FOUND[*]}"
            black --check --diff "${FOUND[@]}"
          fi

      - name: Import sorting check (isort)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            CHANGED=$(git diff --name-only "$BASE_SHA...$HEAD_SHA" -- '*.py' | grep -Ev '(^|/|\\)mock_api\.py$' || true)
            if [ -z "$CHANGED" ]; then
              echo "No Python file changes in PR; skipping isort"
              exit 0
            fi
            echo "Running isort on changed files (excluding mock_api.py):\n$CHANGED"
            isort --check-only --diff $CHANGED
          else
            TARGETS=(api backend portal_api apps packages shared tests)
            FOUND=()
            for d in "${TARGETS[@]}"; do
              if [ -d "$d" ]; then
                FOUND+=("$d")
              fi
            done
            if [ ${#FOUND[@]} -eq 0 ]; then
              echo "No target code directories found; skipping isort"
              exit 0
            fi
            echo "Running isort on: ${FOUND[*]}"
            isort --check-only --diff "${FOUND[@]}"
          fi

      - name: Linting (Flake8)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            CHANGED=$(git diff --name-only "$BASE_SHA...$HEAD_SHA" -- '*.py' | grep -Ev '(^|/|\\)mock_api\.py$' || true)
            if [ -z "$CHANGED" ]; then
              echo "No Python file changes in PR; skipping flake8"
              exit 0
            fi
            echo "Running flake8 on changed files (excluding mock_api.py):\n$CHANGED"
            flake8 $CHANGED --count --select=E9,F63,F7,F82 --show-source --statistics
          else
            TARGETS=(api backend portal_api apps packages shared tests)
            FOUND=()
            for d in "${TARGETS[@]}"; do
              if [ -d "$d" ]; then
                FOUND+=("$d")
              fi
            done
            if [ ${#FOUND[@]} -eq 0 ]; then
              echo "No target code directories found; skipping flake8"
              exit 0
            fi
            echo "Running flake8 on: ${FOUND[*]}"
            flake8 "${FOUND[@]}" --count --select=E9,F63,F7,F82 --show-source --statistics
          fi

      - name: Type checking (MyPy)
        run: |
          if [ -d "api" ]; then
            echo "Running mypy on api/"
            mypy api/ --ignore-missing-imports
          else
            echo "api/ directory not found; skipping mypy"
          fi

      - name: Security check (Bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Dependency vulnerability check (Safety)
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # 단위 테스트
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [changes, code-quality]
    if: ${{ needs.changes.outputs.tests == 'true' || needs.changes.outputs.py == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.seedtest_api == 'true' }}
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set TEST_PROFILE
        id: set-profile
        run: |
          PROFILE="${{ github.event.inputs.profile }}"
          if [ -z "$PROFILE" ]; then
            if [ "${{ github.event_name }}" = "schedule" ] || { [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; }; then
              PROFILE=full
            else
              PROFILE=fast
            fi
          fi
          echo "TEST_PROFILE=$PROFILE" >> $GITHUB_ENV
          echo "profile=$PROFILE" >> $GITHUB_OUTPUT
          echo "Using TEST_PROFILE=$PROFILE"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "Installing project dependencies from requirements.txt"
            pip install -r requirements.txt
          else
            echo "requirements.txt not found; skipping project dependency install"
          fi
          pip install pytest pytest-cov pytest-mock

      - name: Run unit tests (fast/full)
        run: |
          if [ ! -d tests ]; then
            echo "tests/ not found; skipping unit tests"
            exit 0
          fi
          if [ "$TEST_PROFILE" = "fast" ]; then
            echo "Running fast tests (no coverage)"
            if [ -f pytest.fast.ini ]; then
              pytest -c pytest.fast.ini
            else
              pytest -q
            fi
          else
            echo "Running full tests (with coverage)"
            pytest tests/ -v --cov=api --cov-report=xml --cov-report=html
          fi
        env:
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        if: ${{ steps.set-profile.outputs.profile == 'full' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          if [ -z "${CODECOV_TOKEN}" ]; then
            echo "CODECOV_TOKEN not set; skipping coverage upload"
            exit 0
          fi
          echo "Uploading coverage to Codecov"
          curl -Os https://cli.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t "$CODECOV_TOKEN" -f ./coverage.xml -F unittests -n unittests || true

  # 통합 테스트
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, unit-tests]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.seedtest_api == 'true' }}
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "Installing project dependencies from requirements.txt"
            pip install -r requirements.txt
          else
            echo "requirements.txt not found; skipping project dependency install"
          fi
          pip install pytest requests

      - name: Start API server
        run: |
          if [ -f api/dashboard_data.py ]; then
            python api/dashboard_data.py &
          elif [ -f backend/app.py ]; then
            python backend/app.py &
          else
            echo "No known API entrypoint found; skipping server start"
            exit 0
          fi
          sleep 10
        env:
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: |
          if [ -f monitoring_test.py ]; then python monitoring_test.py; fi
          if [ -f security_test.py ]; then python security_test.py; fi
          if [ ! -f monitoring_test.py ] && [ ! -f security_test.py ]; then
            echo "No integration test scripts found; skipping"
          fi

      - name: API health check
        run: |
          if curl -fsS http://localhost:8002/healthz >/dev/null; then
            echo "Health endpoint OK"
            curl -fsS http://localhost:8002/metrics >/dev/null || true
          else
            echo "API not running; skipping health checks"
          fi

  # 성능 테스트
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [changes, integration-tests]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.api == 'true' }}
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "Installing project dependencies from requirements.txt"
            pip install -r requirements.txt
          else
            echo "requirements.txt not found; skipping project dependency install"
          fi
          pip install locust

      - name: Start API server
        run: |
          if [ -f api/dashboard_data.py ]; then
            python api/dashboard_data.py &
          elif [ -f backend/app.py ]; then
            python backend/app.py &
          else
            echo "No known API entrypoint found; skipping server start"
            exit 0
          fi
          sleep 10
        env:
          REDIS_URL: redis://localhost:6379

      - name: Run performance tests
        run: |
          if [ -f performance_test.py ]; then
            python performance_test.py
          else
            echo "performance_test.py not found; skipping"
          fi

      - name: Load testing with Locust
        run: |
          if [ -f tests/locustfile.py ]; then
            locust -f tests/locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8002
          else
            echo "tests/locustfile.py not found; skipping"
          fi

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes, code-quality]
    if: ${{ needs.changes.outputs.py == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.seedtest_api == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker 빌드 테스트
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [changes, unit-tests, integration-tests]
    if: ${{ needs.changes.outputs.docker == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Dockerfile
        id: dockerfile_check
        run: |
          if [ -f Dockerfile ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
            echo "Dockerfile not found; skipping Docker build/test"
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        if: steps.dockerfile_check.outputs.has_dockerfile == 'true'
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: dreamseed:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: steps.dockerfile_check.outputs.has_dockerfile == 'true'
        run: |
          docker run --rm -d --name dreamseed-test -p 8002:8002 dreamseed:test
          sleep 10
          curl -f http://localhost:8002/healthz || exit 1
          docker stop dreamseed-test

  # SeedTest API: DB-backed tests with Postgres and Alembic migrations
  seedtest-api-tests:
    name: SeedTest API - DB Tests
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.seedtest_api == 'true' }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: dreamseed_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d dreamseed_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          # Minimal install for seedtest_api if monorepo root has no requirements
          pip install fastapi uvicorn[standard] sqlalchemy psycopg2-binary alembic pydantic pydantic-settings python-dotenv httpx python-jose pytest pytest-cov
      - name: Alembic upgrade (SeedTest API)
        env:
          DATABASE_URL: postgresql+psycopg2://user:pass@localhost:5432/dreamseed_db
        run: |
          PYTHONPATH=apps alembic -c apps/seedtest_api/alembic.ini upgrade head
      - name: Run tests (SeedTest API)
        env:
          DATABASE_URL: postgresql+psycopg2://user:pass@localhost:5432/dreamseed_db
          LOCAL_DEV: 'true'
        run: |
          pytest -q apps/seedtest_api/tests

  # 배포 준비
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [changes]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Validate build can package or compile
        run: |
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            python -m pip install --upgrade pip build
            python -m build --sdist --wheel || true
          fi
          # Always run a fast syntax compilation to catch obvious errors
          python -m compileall -q .

  # 알림
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: always()
    steps:
      - name: Notify on success
        if: needs.prepare-deployment.result == 'success'
        run: |
          echo "✅ DreamSeed CI Pipeline 성공!"
          echo "🚀 배포 준비 완료"

      - name: Notify on failure
        if: needs.prepare-deployment.result == 'failure'
        run: |
          echo "❌ DreamSeed CI Pipeline 실패!"
          echo "🔍 로그를 확인하세요"

  db-migrate:
    name: DB Migrations
    runs-on: ubuntu-latest
    needs: [changes]
    # 조건: push(main) 또는 PR 라벨에 'db-migrate' 포함, 그리고 seedtest_api 변경이 있는 경우만
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && contains(join(github.event.pull_request.labels.*.name, ','), 'db-migrate')) }}
    env:
      STAGE: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run Alembic
        if: ${{ needs.changes.outputs.seedtest_api == 'true' }}
        run: |
          cd apps/seedtest_api
          python -m venv .venv && source .venv/bin/activate
          pip install -r requirements.txt
          if [ "$STAGE" = "production" ]; then
            alembic upgrade head
          else
            alembic upgrade head -x seed=true
          fi

