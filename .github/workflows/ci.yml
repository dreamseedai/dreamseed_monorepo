name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        npm ci
        npm run build --workspace=@dreamseed/shared-types
        npm run build --workspace=@dreamseed/shared-ui

    - name: Lint and type-check
      run: |
        npm run lint --workspaces --if-present
        npm run type-check --workspaces --if-present

    - name: Build frontend apps
      run: |
        npm run build --workspace=@dreamseed/portal-app
        npm run build --workspace=@dreamseed/learner-app

    - name: Test Python services
      run: |
        cd services/career-api && pip install -r requirements.txt && python -m pytest tests/ --verbose || echo "No tests found"
        cd ../learning-api && pip install -r requirements.txt && python -m pytest tests/ --verbose || echo "No tests found"
        cd ../progress-api && pip install -r requirements.txt && python -m pytest tests/ --verbose || echo "No tests found"
        cd ../ai-orchestrator && pip install -r requirements.txt && python -m pytest tests/ --verbose || echo "No tests found"

  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build AI Orchestrator
      run: |
        docker build --target ai-orchestrator -t dreamseed/ai-orchestrator:latest .

    - name: Build Career API
      run: |
        docker build --target career-api -t dreamseed/career-api:latest .

    - name: Build Learning API
      run: |
        docker build --target learning-api -t dreamseed/learning-api:latest .

    - name: Build Progress API
      run: |
        docker build --target progress-api -t dreamseed/progress-api:latest .

    - name: Build Frontend
      run: |
        docker build --target frontend -t dreamseed/frontend:latest .

    - name: Test Docker Compose
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'