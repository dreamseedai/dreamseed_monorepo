name: DreamSeed CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 오전 2시에 실행
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      profile:
        description: 'Test profile (fast: no coverage, full: with coverage)'
        required: false
        default: 'fast'
        type: choice
        options:
          - fast
          - full

permissions:
  contents: read
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  REDIS_VERSION: '7'

jobs:
  # 코드 품질 검사
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety || true
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi

      - name: Code formatting check (Black)
        continue-on-error: true
        run: black --check --diff .

      - name: Import sorting check (isort)
        continue-on-error: true
        run: isort --check-only --diff .

      - name: Linting (Flake8)
        continue-on-error: true
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Type checking (MyPy)
        continue-on-error: true
        run: |
          if [ -d api ]; then mypy api/ --ignore-missing-imports; else echo "api/ not found, skipping mypy"; fi

      - name: Security check (Bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Dependency vulnerability check (Safety)
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # 단위 테스트
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    env:
      TEST_PROFILE: 'fast'
      HAS_TESTS: 'false'
      HAS_COVERAGE: 'false'
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect tests presence
        id: detect-tests
        run: |
          if [ -d tests ] && find tests -type f \( -name 'test_*.py' -o -name '*_test.py' -o -name '*.test.py' \) | grep -q .; then
            echo "HAS_TESTS=true" >> $GITHUB_ENV
          else
            echo "HAS_TESTS=false" >> $GITHUB_ENV
          fi

      - name: Set TEST_PROFILE
        id: set-profile
        run: |
          PROFILE="${{ github.event.inputs.profile }}"
          if [ -z "$PROFILE" ]; then
            if [ "${{ github.event_name }}" = "schedule" ] || { [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; }; then
              PROFILE=full
            else
              PROFILE=fast
            fi
          fi
          echo "TEST_PROFILE=$PROFILE" >> $GITHUB_ENV
          echo "Using TEST_PROFILE=$PROFILE"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-mock

      - name: Run unit tests (fast/full)
        if: env.HAS_TESTS == 'true'
        run: |
          if [ "$TEST_PROFILE" = "fast" ]; then
            echo "Running fast tests (no coverage)"
            if [ -f pytest.fast.ini ]; then pytest -c pytest.fast.ini; else pytest -q; fi
          else
            echo "Running full tests (with coverage)"
            pytest tests/ -v --cov=api --cov-report=xml --cov-report=html || pytest -q || true
          fi
        env:
          REDIS_URL: redis://localhost:6379

      - name: No tests to run
        if: env.HAS_TESTS != 'true'
        run: echo "No tests detected; skipping unit tests."

      - name: Decide coverage upload
        if: env.TEST_PROFILE == 'full'
        run: |
          if [ -f coverage.xml ]; then
            echo "HAS_COVERAGE=true" >> $GITHUB_ENV
          else
            echo "HAS_COVERAGE=false" >> $GITHUB_ENV
          fi

      - name: Upload coverage reports
        if: env.TEST_PROFILE == 'full' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) && env.HAS_COVERAGE == 'true'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: unittests
          fail_ci_if_error: false

  # 통합 테스트
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      RUN_IT: 'false'
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decide integration run
        run: |
          if [ -f api/dashboard_data.py ] && { [ -f monitoring_test.py ] || [ -f security_test.py ]; }; then
            echo "RUN_IT=true" >> $GITHUB_ENV
          else
            echo "RUN_IT=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        if: env.RUN_IT == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: env.RUN_IT == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Start API server
        if: env.RUN_IT == 'true'
        run: |
          python api/dashboard_data.py &
          sleep 10
        env:
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        if: env.RUN_IT == 'true'
        run: |
          python monitoring_test.py
          python security_test.py

      - name: API health check
        if: env.RUN_IT == 'true'
        run: |
          curl -f http://localhost:8002/healthz || exit 1
          curl -f http://localhost:8002/metrics || exit 1

  # 성능 테스트
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    env:
      RUN_PERF: 'false'
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decide performance run
        run: |
          if [ -f tests/locustfile.py ]; then
            echo "RUN_PERF=true" >> $GITHUB_ENV
          else
            echo "RUN_PERF=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        if: env.RUN_PERF == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: env.RUN_PERF == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Start API server
        if: env.RUN_PERF == 'true'
        run: |
          python api/dashboard_data.py &
          sleep 10
        env:
          REDIS_URL: redis://localhost:6379

      - name: Run performance tests
        if: env.RUN_PERF == 'true'
        run: |
          if [ -f performance_test.py ]; then python performance_test.py; else echo "performance_test.py not found, skipping"; fi

      - name: Load testing with Locust
        if: env.RUN_PERF == 'true'
        run: |
          locust -f tests/locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8002

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker 빌드 테스트
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    env:
      RUN_BUILD: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decide docker build run
        run: |
          if [ -f Dockerfile ]; then
            echo "RUN_BUILD=true" >> $GITHUB_ENV
          else
            echo "RUN_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        if: env.RUN_BUILD == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        if: env.RUN_BUILD == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: dreamseed:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: env.RUN_BUILD == 'true'
        run: |
          docker run --rm -d --name dreamseed-test -p 8002:8002 dreamseed:test
          sleep 10
          curl -f http://localhost:8002/healthz || exit 1
          docker stop dreamseed-test

  # 배포 준비
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r api/ deployment/
          cp -r admin/ deployment/
          cp -r *.html deployment/
          cp -r *.py deployment/
          cp -r *.sh deployment/
          cp -r *.conf deployment/
          cp -r *.yml deployment/
          cp -r *.json deployment/
          cp -r requirements.txt deployment/
          cp -r Dockerfile deployment/
          tar -czf dreamseed-deployment.tar.gz deployment/

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: dreamseed-deployment
          path: dreamseed-deployment.tar.gz

  # 알림
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: always()
    steps:
      - name: Notify on success
        if: needs.prepare-deployment.result == 'success'
        run: |
          echo "✅ DreamSeed CI Pipeline 성공!"
          echo "🚀 배포 준비 완료"

      - name: Notify on failure
        if: needs.prepare-deployment.result == 'failure'
        run: |
          echo "❌ DreamSeed CI Pipeline 실패!"
          echo "🔍 로그를 확인하세요"

