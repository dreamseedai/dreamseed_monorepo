name: Add Issues/PRs to Project v2 (DreamSeed)

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, labeled, ready_for_review]
  workflow_dispatch:
    inputs:
      content_type:
        description: "Type of content to add (issue or pull_request)"
        required: false
        default: ""
      content_number:
        description: "Issue/PR number to add"
        required: false
        default: ""

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
      repository-projects: write
    concurrency:
      group: project-add-${{ github.event_name }}-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
      cancel-in-progress: true
    steps:
      - name: Resolve Project (DreamSeed) node ID (org or user)
        id: proj
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;  // 사용자 또는 조직 로그인
            const title = "DreamSeed"; // Project v2 이름
            // Query user projects first; if not found, try organization projects.
            let nodes = [];
            try {
              const userQ = `query($login:String!){ user(login:$login){ projectsV2(first:100){ nodes{ id title } } } }`;
              const userRes = await github.graphql(userQ, { login: owner });
              nodes = userRes.user?.projectsV2?.nodes || [];
            } catch (e) {
              core.info(`User projects query failed (may be fine): ${e}`);
            }
            if (!nodes.length) {
              try {
                const orgQ = `query($login:String!){ organization(login:$login){ projectsV2(first:100){ nodes{ id title } } } }`;
                const orgRes = await github.graphql(orgQ, { login: owner });
                nodes = orgRes.organization?.projectsV2?.nodes || [];
              } catch (e) {
                core.info(`Org projects query failed (owner may be a user): ${e}`);
              }
            }
            let proj = nodes.find(n => n.title === title);
            if (!proj) {
              core.info(`Project v2 '${title}' not found for login '${owner}'. Attempting to create...`);
              // Resolve owner node id (prefer user, else org)
              let ownerId = null;
              try {
                const userIdQ = `query($login:String!){ user(login:$login){ id } }`;
                const userIdRes = await github.graphql(userIdQ, { login: owner });
                ownerId = userIdRes.user?.id || null;
              } catch {}
              if (!ownerId) {
                try {
                  const orgIdQ = `query($login:String!){ organization(login:$login){ id } }`;
                  const orgIdRes = await github.graphql(orgIdQ, { login: owner });
                  ownerId = orgIdRes.organization?.id || null;
                } catch {}
              }
              if (!ownerId) {
                core.warning(`Unable to resolve owner id for '${owner}'. Skipping.`);
                core.setOutput("project_id", "");
              } else {
                const createM = `
                  mutation($ownerId:ID!, $title:String!) {
                    createProjectV2(input:{ownerId:$ownerId, title:$title}) {
                      projectV2 { id title }
                    }
                  }
                `;
                try {
                  const createRes = await github.graphql(createM, { ownerId, title });
                  const created = createRes?.createProjectV2?.projectV2;
                  if (created?.id) {
                    core.info(`Created Project '${created.title}' id: ${created.id}`);
                    core.setOutput("project_id", created.id);
                  } else {
                    core.warning(`Project creation did not return an id. Skipping.`);
                    core.setOutput("project_id", "");
                  }
                } catch (e) {
                  core.warning(`Failed to create Project '${title}': ${e}`);
                  core.setOutput("project_id", "");
                }
              }
            } else {
              core.setOutput("project_id", proj.id);
              core.info(`Resolved Project '${title}' id: ${proj.id}`);
            }

      - name: Add Issue to Project
        id: add_issue
        if: ${{ github.event_name == 'issues' && steps.proj.outputs.project_id != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = "${{ steps.proj.outputs.project_id }}";
            const contentId = context.payload.issue.node_id;
            const m = `
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                  item { id }
                }
              }
            `;
            try {
              const r = await github.graphql(m, { projectId, contentId });
              const itemId = r?.addProjectV2ItemById?.item?.id;
              core.setOutput('added', itemId ? 'true' : 'false');
              core.info(`Added issue to Project ${projectId}, item: ${itemId || 'unknown'}`);
            } catch (e) {
              core.warning(`Failed to add issue to Project: ${e}`);
              core.setOutput('added', 'false');
            }

      - name: Comment on Issue with result
        if: ${{ github.event_name == 'issues' && steps.proj.outputs.project_id != '' && steps.add_issue.outputs.added == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ This issue was added to Project 'DreamSeed'.`
            });

      - name: Add PR to Project
        id: add_pr
        if: ${{ github.event_name == 'pull_request' && steps.proj.outputs.project_id != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = "${{ steps.proj.outputs.project_id }}";
            const contentId = context.payload.pull_request.node_id;
            const m = `
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                  item { id }
                }
              }
            `;
            try {
              const r = await github.graphql(m, { projectId, contentId });
              const itemId = r?.addProjectV2ItemById?.item?.id;
              core.setOutput('added', itemId ? 'true' : 'false');
              core.info(`Added pull request to Project ${projectId}, item: ${itemId || 'unknown'}`);
            } catch (e) {
              core.warning(`Failed to add pull request to Project: ${e}`);
              core.setOutput('added', 'false');
            }

      - name: Comment on PR with result
        if: ${{ github.event_name == 'pull_request' && steps.proj.outputs.project_id != '' && steps.add_pr.outputs.added == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `✅ This pull request was added to Project 'DreamSeed'.`
            });

      - name: Add content via manual inputs (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const type = core.getInput('content_type');
            const numStr = core.getInput('content_number');
            if (!type || !numStr) {
              core.info('No manual content inputs provided. Skipping.');
              return;
            }
            const number = parseInt(numStr, 10);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let projectId = "${{ steps.proj.outputs.project_id }}";
            // If project id wasn't resolved earlier, resolve/create now
            if (!projectId) {
              const title = 'DreamSeed';
              // try user first
              const userQ = `query($login:String!){ user(login:$login){ id projectsV2(first:100){ nodes{ id title } } } }`;
              let nodes = [];
              let ownerId = null;
              try {
                const userRes = await github.graphql(userQ, { login: owner });
                nodes = userRes.user?.projectsV2?.nodes || [];
                ownerId = userRes.user?.id || null;
              } catch {}
              if (!nodes.length) {
                try {
                  const orgQ = `query($login:String!){ organization(login:$login){ id projectsV2(first:100){ nodes{ id title } } } }`;
                  const orgRes = await github.graphql(orgQ, { login: owner });
                  nodes = orgRes.organization?.projectsV2?.nodes || [];
                  ownerId = ownerId || orgRes.organization?.id || null;
                } catch {}
              }
              const existing = nodes.find(n => n.title === title);
              if (existing) {
                projectId = existing.id;
              } else if (ownerId) {
                const createM = `mutation($ownerId:ID!, $title:String!){ createProjectV2(input:{ownerId:$ownerId, title:$title}){ projectV2 { id title } } }`;
                try {
                  const createRes = await github.graphql(createM, { ownerId, title });
                  const created = createRes?.createProjectV2?.projectV2;
                  projectId = created?.id || '';
                } catch (e) {
                  core.warning(`Manual path: failed to create Project '${title}': ${e}`);
                }
              }
              if (!projectId) {
                core.warning('Manual path: no projectId resolved; cannot add content.');
                return;
              }
            }
            let nodeId = null;
            if (type === 'issue') {
              const { data } = await github.rest.issues.get({ owner, repo, issue_number: number });
              nodeId = data?.node_id;
            } else if (type === 'pull_request') {
              const { data } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              nodeId = data?.node_id;
            } else {
              core.info(`Unknown content_type '${type}'. Skipping.`);
              return;
            }
            if (!nodeId) {
              core.warning(`Unable to resolve node_id for ${type} #${number}`);
              return;
            }
            const m = `
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                  item { id }
                }
              }
            `;
            try {
              const r = await github.graphql(m, { projectId, contentId: nodeId });
              const itemId = r?.addProjectV2ItemById?.item?.id;
              if (itemId) {
                core.info(`Manually added ${type} #${number} to Project ${projectId}`);
                if (type === 'issue') {
                  await github.rest.issues.createComment({ owner, repo, issue_number: number, body: `✅ Issue added to Project 'DreamSeed'.`});
                } else {
                  await github.rest.issues.createComment({ owner, repo, issue_number: number, body: `✅ Pull request added to Project 'DreamSeed'.`});
                }
              } else {
                core.warning(`GraphQL returned no item id when adding ${type} #${number}`);
              }
            } catch (e) {
              core.warning(`Failed manual add of ${type} #${number}: ${e}`);
            }
